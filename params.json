{"name":"Dragonpay-sdk-php","tagline":"A PHP Library for consuming Dragonpay's Payment Switch API","body":"Dragonpay Payment Switch API - PHP Library\r\n========\r\n\r\nA PHP Library for consuming Dragonpay's Payment Switch API.\r\n\r\n## Quick start\r\n\r\n### Required setup\r\n\r\nThe easiest way to install this library is via Composer.\r\n\r\nCreate a `composer.json` file and enter the following:\r\n\r\n    {\r\n        \"require\": {\r\n            \"coreproc/dragonpay-sdk\": \"dev-master\"\r\n        }\r\n    }\r\n\r\nIf you haven't yet downloaded your composer file, you can do so by executing the following in your command line:\r\n\r\n    curl -sS https://getcomposer.org/installer | php\r\n\r\nOnce you've downloaded the composer.phar file, continue with your installation by running the following:\r\n\r\n    php composer.phar install\r\n    \r\n## Usage\r\n\r\n### Setting up the Dragonpay Client\r\n\r\nRequire the autoloader and import the `DragonpayClient`:\r\n\r\n    require '../vendor/autoload.php';\r\n\r\n    use Coreproc\\Dragonpay\\DragonpayClient;\r\n    \r\nSet the merchant credentials:\r\n\r\n    $credentials = [\r\n        'merchantId'        => 'merchant-id',\r\n        'merchantPassword'  => 'merchant-password',\r\n    ];\r\n    \r\nLogging is optional. It's set to false by default and can omitted when instantiating the client like so:\r\n\r\n    $client = new DragonpayClient($credentials);\r\n    \r\nWhen set to true, a third parameter is required for the logging directory.\r\n\r\n    $logging = true;\r\n    $logDirectory = 'logs';\r\n\r\nInstantiate the client:\r\n\r\n    $client = new DragonpayClient($credentials, $logging, $logDirectory);\r\n\r\n### Checkout\r\n\r\nImport the `Checkout` class:\r\n\r\n    use Coreproc\\Dragonpay\\Checkout;\r\n\r\nInstantiate the `Checkout` class like so:\r\n \r\n    $checkout = new Checkout($client);\r\n    \r\nREST is the default web service used by the `Checkout` class. For using the SOAP web service, you can set the second parameter to `SOAP`:\r\n\r\n    $checkout = new Checkout($client, 'SOAP');\r\n\r\nTransaction parameters from the merchant site:\r\n\r\nREST service specific required parameters:\r\n    \r\n    $params = [\r\n        'transactionId' => 'transaction-id',\r\n        'amount'        => '20000.00',\r\n        'currency'      => 'PHP',\r\n        'description'   => 'Playstation 4',\r\n        'email'         => 'john@example.com',\r\n    ];\r\n\r\nSOAP service specific required parameters:\r\n\r\n    $params = [\r\n        'transactionId' => 'transaction-id',\r\n        'amount'        => '20000.99',\r\n        'currency'      => 'PHP',\r\n        'description'   => 'Playstation 4',\r\n    ];\r\n\r\nFor getting the URL to Payment Switch:\r\n\r\nThe `getUrl` method returns a URL for redirecting to the Payment Switch manually.\r\n    \r\n    $url = $checkout->getUrl($params);\r\n    \r\nNow `$url` is equal to:\r\n\r\nUsing the REST web service:\r\n\r\n    http://gw.dragonpay.ph/Pay.aspx?merchantid=merchant-id&txnid=transaction-id&amount=20000.00&ccy=PHP&description=Playstation+4&email=john%40example.com&digest=5ed24e0697800b569707542cff867eb2e9c681aa\r\n    \r\nUsing the SOAP web service:\r\n\r\n    http://gw.dragonpay.ph/Pay.aspx?tokenid=8ca5a73275d5f54cz06219a09f935c26\r\n\r\nUse the `redirect` method for redirecting to the generated URL:\r\n\r\n    $checkout->redirect($params);\r\n    \r\nFiltering Payment Channels\r\n\r\nThere may be instances wherein the merchant would want to filter the payment\r\nchannels that they want to appear in Dragonpay’s payment selection page, or they\r\nmay want to skip the Dragonpay page altogether and go straight to the payment\r\ndetails for a specific channel.\r\n\r\nThe merchant can implement this by providing a second parameter to the `getUrl` and `redirect` methods of the class `Checkout` respectively.\r\n \r\nFor a showing only a specific payment channel:\r\n\r\n    Online Banking: online_banking\r\n    Over-the-Counter Banking and ATM: otc_banking_atm\r\n    Over-the-Counter non-Bank: otc_non_bank\r\n    PayPal: paypal\r\n    Credit Cards: credit_card \r\n    Mobile (Gcash): mobile\r\n    International OTC: international_otc\r\n\r\nFor redirecting directly to a payment channel:\r\n\r\n    Globe Gcash: gcash_direct\r\n    Credit Cards: credit_card_direct\r\n    PayPal: paypal_direct\r\n    \r\nPass on the filter like so:\r\n\r\n    $filter = 'online_banking';\r\n    \r\n    $checkout = new Checkout($client);\r\n    \r\n    $checkout->getUrl($params, $filter);\r\n    \r\n    $checkout->redirect($params, $filter);\r\n    \r\n### Handling the Response\r\n\r\nImport the `Transaction` class:\r\n\r\n    use Coreproc\\Dragonpay\\Transaction;\r\n\r\nPass in the client instance:\r\n\r\n    $transaction = new Transaction($client);\r\n\r\nRequired request data from Dragonpay Payment Switch:\r\n\r\n    $params = [\r\n        'transactionId'   => $_GET['txnid'],\r\n        'referenceNumber' => $_GET['refNo'],\r\n        'status'          => $_GET['status'],\r\n        'message'         => $_GET['message'],\r\n        'digest'          => $_GET['digest']\r\n    ];\r\n    \r\nChecking if the transaction is successful:\r\n\r\nThe `isSuccessful` method returns a boolean (true or false)\r\n\r\n    $status = $transaction->isSuccessful($params); // returns true/false\r\n    \r\n### Support functions\r\n\r\nThe Payment Switch provides some supplementary functions allowing merchants to more tightly\r\nintegrate and automate their systems. These functions are available using the REST or SOAP web service.\r\n\r\n### Transaction Inquiry\r\n\r\nThe merchant can inquire the status of a transaction by using this function.\r\n\r\nImport the `Transaction` class:\r\n\r\n    use Coreproc\\Dragonpay\\Transaction;\r\n    \r\nInstantiate the `Transaction` class like so:\r\n\r\n    $transaction = new Transaction($client);\r\n    \r\nREST is the default web service used by the `Transaction` class. For using the SOAP web service, you can set the second parameter to `SOAP`:\r\n\r\n    $transaction = new Transaction($client, 'SOAP');\r\n    \r\nThe `inquire` method returns the status of the transaction (string)\r\n\r\n    $transactionId = 'transaction-id';\r\n    \r\n    // Returns one of the following:\r\n    // Success\r\n    // Failure\r\n    // Pending\r\n    // Unknown\r\n    // Refund\r\n    // Chargeback\r\n    // Void\r\n    // Authorized \r\n    // Error\r\n    $status = $transaction->inquire($transactionId); \r\n    \r\n### Cancellation of Transaction\r\n\r\nThe merchant can cancel a **pending** transaction by using this function.\r\n\r\nThe `cancel` method returns the status of the transaction cancellation (string)\r\n \r\n    use Coreproc\\Dragonpay\\Transaction;\r\n    \r\n    $transaction = new Transaction($client); // OR $transaction = new Transaction($client, 'SOAP');\r\n    \r\n    $transactionId = 'transaction-id';\r\n    \r\n    $status = $transaction->cancel($transactionId); // returns Success or Failed\r\n    \r\n### Sending of Billing Information\r\n\r\nFor additional fraud checking, the merchant can send the customer’s billing address by using this function.\r\n\r\nThe SOAP web service is required for this function.\r\n\r\n    use Coreproc\\Dragonpay\\Transaction;\r\n    \r\n    $transaction = new Transaction($client, 'SOAP');\r\n\r\nRequired parameters to be sent to Payment Switch:\r\n\r\n    $params = [\r\n        'transactionId' => '12345',\r\n        'firstName'     => 'John',\r\n        'lastName'      => 'Doe',\r\n        'address1'      => 'Address 1',\r\n        'address2'      => 'Address 2',\r\n        'city'          => 'Quezon City',\r\n        'state'         => 'State',\r\n        'country'       => 'PH', // 2-char ISO country code (ex. PH, US, CA)\r\n        'zipCode'       => '1116', // OPTIONAL\r\n        'telNo'         => '(02)9123456',\r\n        'email'         => 'john@example.com'\r\n    ];\r\n    \r\nThe `sendBillingInformation` method returns the status of sending of billing information. (string)\r\n\r\n    $status = $transaction->sendBillingInformation($params); // returns Success or Failed","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}